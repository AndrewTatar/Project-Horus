; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "HORUS Desktop Security"
#define MyAppVersion "1.0"
#define MyAppPublisher "Project Horus"
#define MyAppURL "https://github.com/AndrewTatar/Project-Horus"
#define FeedbackUrl "https://github.com/AndrewTatar/Project-Horus"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{27D70D37-A94B-4B3C-B249-E1EDDD0D208D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf32}\Project Horus\{#MyAppName}
DisableDirPage=yes
DefaultGroupName={#MyAppName}
InfoBeforeFile=README.txt
OutputDir=Output
OutputBaseFilename=HORUS-Setup
SetupIconFile=HORUS.ico
Compression=lzma
SolidCompression=yes
AppCopyright=Project Horus - BITS RMIT SP2 2016
UsePreviousAppDir=False
UninstallDisplayName=HORUS Desktop Security
UninstallDisplaySize=10760192
UninstallDisplayIcon={uninstallexe}
VersionInfoVersion=1.0
VersionInfoCompany=Project Horus
VersionInfoCopyright=Project Hours - RMIT BITS SP2 2016
VersionInfoProductName=HORUS Desktop Security
VersionInfoProductVersion=1.1

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "Files\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "Files\Horus-Config.exe"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

#include "it_download.iss"; 

[Run]
Filename: "{app}\Horus-Config.exe"; Parameters: "{code:GetUserData}"; WorkingDir: "{app}"; Flags: postinstall runascurrentuser shellexec; Description: "Start Configuration"

[Dirs]
Name: {app}; Permissions: users-full
Name: "{app}\Credentials"; Permissions: users-full
Name: "{app}\Faces"; Permissions: users-full
Name: "{app}\Captures"; Permissions: users-full

[Code]
var
  Page: TInputQueryWizardPage;

procedure InitializeWizard();
begin
  itd_init;
  itd_downloadafter(wpReady);
  Page := CreateInputQueryPage(wpWelcome,
  'Personal Information (Required)', 'Who are you?',
  'Please specify your Name and your Email Address, then click Next.' + #13#10 + #13#10 + 'After the installation we will use your email addres to email you our Android application.');
  // Add items (False means it's not a password edit)
  Page.Add('Name:', False);
  Page.Add('Email:', False);

  // Set initial values (optional)
  Page.Values[0] := ExpandConstant('{sysuserinfoname}');
end;

function UpdateRegistry(): string;
begin
  //Turn on Screensaver
  RegWriteStringValue(HKEY_CURRENT_USER, 'Control Panel\Desktop',
    'ScreenSaveActive', '1');

  //Set Horus as Screensaver
  RegWriteStringValue(HKEY_CURRENT_USER, 'Control Panel\Desktop',
    'SCRNSAVE.EXE', ExpandConstant('{app}') + '\Horus.scr');
end;

function GetUserData(Value: string): string;
begin
Result := '-install "email:' + Page.Values[1] + '"';
end;

function IsDotNetDetected_da7caa4c_5c42_47d9_88e0_a8c0ed5e1b76(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1.4322'     .NET Framework 1.1
//    'v2.0.50727'    .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//    'v4.5.1'        .NET Framework 4.5.1
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var        
    key: string;
    install, release, serviceCount: cardinal;
    check45, check451, success: boolean;
begin
    version := 'v' + version;
    // .NET 4.5 installs as update to .NET 4.0 Full
    if version = 'v4.5' then begin
        version := 'v4\Full';
        check45 := true;
    end else
        check45 := false;

	// .NET 4.5.1 installs as update to .NET 4.0 Full
    if version = 'v4.5.1' then begin
        version := 'v4\Full';
        check451 := true;
    end else
        check451 := false;
		
    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + version;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0/4.5/4.5.1 uses value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 uses additional value Release
    if check45 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= 378389);
    end;
	
	// .NET 4.5.1 uses additional value Release
    if check451 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= 378675);
    end;

    result := success and (install = 1) and (serviceCount >= service);

end;

function InitializeSetup(): Boolean;
var        
    ErrCode: integer;
    FinalResult: boolean;

begin
  FinalResult := true;

  if (not IsDotNetDetected_da7caa4c_5c42_47d9_88e0_a8c0ed5e1b76('4.5.1', 0)) then 
    begin
      itd_addfile('https://go.microsoft.com/fwlink/?LinkId=225702', expandconstant('{tmp}\dotnet.exe'));
    end;

  result := FinalResult;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
    ErrCode: integer;
    UserName, UserEmail: String;

begin
    if (CurStep = ssPostInstall) then
      begin 
        //Register Screensaver
        UpdateRegistry();

        WizardForm.StatusLabel.Caption := '';
        WizardForm.StatusLabel.Caption := 'Please wait while setup install prerequisite: .net framework...';
        ShellExec('open', ExpandConstant('{tmp}\dotnet.exe'), '', '', SW_SHOW, ewWaitUntilTerminated, ErrCode);

        if (not IsDotNetDetected_da7caa4c_5c42_47d9_88e0_a8c0ed5e1b76('4.5.1', 0)) then 
        begin
            MsgBox('Automatic installation of .net framework failed. Please try manual installation.', mbInformation, MB_OK);
            Abort();
        end;
        
        WizardForm.StatusLabel.Caption := '';
      end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
    ErrCode: integer;
    Url: string;
begin
    Url := '{#FeedbackUrl}';
    if (CurUninstallStep=usDone) then
    begin
        if (Url <> '') then
          ShellExec('open', Url, '', '', SW_SHOW, ewNoWait, ErrCode);
    end;
end;